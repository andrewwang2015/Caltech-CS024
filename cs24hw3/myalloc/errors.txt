PART A

1. myfree() on address that did not originate from myalloc()?

This will depend on what is stored in the address 4 bytes before the input 
because we subtract the header size from the input pointer to see what the 
current block size is. Now, there's a good chance that dereferencing
the address 4 bytes before the input address will result in a segmentation
fault because such an address is not guaranteed to lie in our memory pool.

Now, if we can dereference and get an integer value. Let's call this value x. 
If this value is positive, then my current program will throw an error and 
exit because it's going to think that the user is attempting to free a block
that was previously freed. Now, for a nonpositive value, my program is going
to treat it like a valid block and attempt to coalesce the right and left 
blocks. Immediately, we are at risk for another seg. fault because in 
calculating the start addresses of the left and right blocks, there is a high
possibility of dereferencing addresses not within our memory pool. If we do
not seg.fault, because our input address does not lie at the start of 
a valid block to begin with, we know that after doing the calculations for 
coalescing, that when a header and footer needs to be updated (due to 
block/s being freed), that it will likely overwrite locations that are not 
designed to hold size data (locations that are meant to store real data NOT 
header and footer data). All in all, our memory pool would be corrupted. More
specifically, the 4 bytes that will be written over to store the header 
information for this errant block will likely write over real data. Similarly,
the 4 bytes that will be written over to store the footer information for
this errant block will also likely write over real data (not to mention that
there is yet another possibility of seg. faulting when doing the calculation
to find the location for where to store the footer information because
abs(x) could be a large number and thus lead us to write on memory that 
is not contained within our memory pool).

2. myfree() on address contained within a memory block returned by myalloc()?

This is very similar to the above scenario. One difference is that when we
attempt to get the int 4 bytes before this address, we will not get a 
segmentation fault because this memory address will be contained in our memory
address. Again, if the integer stored at this memory address is positive,
we will throw an error and exit. However, if this integer is nonpositive,
the risk of corruption is still the same. Because we will still have to 
write header (4 bytes) and footer (4 bytes) information for the freed block, 
we will likely write over real data. Again, the risk of seg. faulting in
doing the calculation to find the left and right blocks for coalescing exists
given that we are reading sizes of blocks at non header/footer locations, and
can thus try to read from addresses not within our memory pool. 

3. myfree() on address that has already been freed?

Currently, myfree() first checks to see the value of the header of the block
to be freed, and throwing an exception and exiting if the value is positive
(meaning it was previously freed). So, if myfree() was called on an address
that was already freed, then an error would be thrown and the program would
exit.

PART B

A.1 can be resolved by simply keeping track of the start and end addresses
of the memory pool, and doing a check everytime we free to make sure that the 
input address lies within our designated range. More specifically, we ensure
that mem + HEADER <= input address < mem + MEMORY_SIZE - FOOTER.
This is because we know that a valid input ptr (which must point to addresses
corresponding to starts of data) cannot lie in the first 4 bytes of our memory
pool (reserved for header) and also cannot lie in the last 4 bytes of our 
memory pool (reserved for footer). 

A.2 can be resolved by the following approach: iterate through our memory pool 
(much like we do in my sanity_check function) and looking at the locations 
where each block starts by iterating through all the headers; the headers
define how big the block sizes are, so we can easily move from block to block
to get locations where blocks actually start. If the input address is not 
among these address locations where proper blocks start, then we can throw an 
error and exit because we will know that the input address was not contained 
within a memory block returned by myalloc(). 

A.3 is already resolved in program and explained in part A.

NOTE: I also implemented linear time deallocation with first fit and 
linear time deallocation with best fit in myalloc_firstfit.c and 
myalloc_bestfit.c, respectively. 